<ul>
@{ 
    foreach(var month in calendarData)
    {
    <li>
        <div class="@GetCssDecorationClass()">
            <table>
                <tr>
                    <td colspan="@CalendarColumnCount">
                        <h5 class="calendar-title">@currentCulture.DateTimeFormat.GetMonthName(month.Month) @month.Year</h5>
                    </td>
                </tr>

                <CalendarDayOfWeekRow CurrentCulture="currentCulture" DaysOfWeek="DayOfWeekColumns" ShowWeekNumbers="@ShowWeekNumbers"></CalendarDayOfWeekRow>

                @foreach(var day in month.Weeks)
                {            
                <tr>
                    @if (ShowWeekNumbers)
                    {
                    <CalendarWeekNumberCell WeekNumber="@day.Weeknumber" />
                    }

                    @foreach(var dayOfWeekColumn in DayOfWeekColumns)
                    {
                        var selectedDay = @day.Days.SingleOrDefault(d => d.DayOfWeek == dayOfWeekColumn);
                        var minimumDaysToBook = MinimumDaysToSelect > 0 ? MinimumDaysToSelect - 1 : 0;
                        var selectedDate = selectedDay?.Date;

                        var firstOccupiedDate = GetFirstOccupiedDateAfterStartDate();

                        <CalendarDayCell CalendarDay="selectedDay" StartDate="startDate" EndDate="endDate">
                            @if (!startDate.HasValue && selectedDay?.Status == DayStatus.Free)
                            {
                                <CalendarDayEnabledContent CalendarDay="selectedDay" OnDateSelected="SelectStartDate"></CalendarDayEnabledContent>
                            }
                            else
                            if (startDate.HasValue && !endDate.HasValue && startDate != selectedDate && selectedDay?.Status == DayStatus.Free)
                            {
                                if ((selectedDate < startDate.Value.AddDays(minimumDaysToBook)) || (firstOccupiedDate.HasValue && (firstOccupiedDate.Value.Subtract(startDate.Value).TotalDays < minimumDaysToBook) || selectedDate > firstOccupiedDate))
                                {
                                    <CalendarDayDisabledContent CalendarDay="selectedDay"></CalendarDayDisabledContent>
                                }
                                else
                                {
                                    <CalendarDayEnabledContent CalendarDay="selectedDay" OnDateSelected="SelectEndDate"></CalendarDayEnabledContent>
                                }
                            }
                            else
                            {
                                if (selectedDay != null)
                                {
                                    if (selectedDay.Status == DayStatus.Free && (startDate.HasValue || endDate.HasValue))
                                    {
                                    <CalendarDayWithTooltipContent StartDate="startDate" EndDate="endDate" CalendarDay="selectedDay" OnReset="ResetStartAndEndDate"></CalendarDayWithTooltipContent>
                                    }
                                    else
                                    {
                                    <CalendarDayDisabledContent CalendarDay="selectedDay"></CalendarDayDisabledContent>
                                    }
                                }
                            }
                        </CalendarDayCell>
                    }
                </tr>
                }
            </table>
        </div>
    </li>
    }
}
</ul>
